{"version":3,"sources":["Img/asteroid.svg","Img/leaf.svg","Store/actions.ts","Store/initialState.ts","Store/reducers.ts","Store/store.ts","Components/helpersDnD.ts","Components/Widgets/Widget1/Widget1.tsx","Components/Widgets/Widget2/Widget2.tsx","Components/Widgets/Widget3/Widget3.tsx","Components/DraggableItem/DraggableItem.tsx","Components/DraggableItemList/DraggableItemList.tsx","Components/DraggableColumn/DraggableColumn.tsx","Components/DashBoard/DashBoard.tsx","App.tsx","index.tsx"],"names":["module","exports","actions","arrayOfDashBoars","idDashBoard","nameOfOffice","orderedWidgetList","dataWidget","id","type","content","title","value","time","Date","now","typeData","dashboardReducer","state","action","CHANGE_WIDGET_ITEM","map","item","payload","CHANGE_WIDGET_LIST_ORDER","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","Widget1","className","src","asteroid","leaf","titleImg","alt","date","hours","getHours","minutes","getMinutes","timeString","Widget2","useState","isTurn","setIsTurn","style","backgroundColor","onClick","Widget3","startValue","setValue","thisType","DraggableItem","idx","draggableId","index","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","getCurrentItem","DraggableItemList","listId","items","droppableId","droppableProps","key","placeholder","DraggableColumn","aria-label","DashBoard","dispatch","useDispatch","dashboardAllInfo","useSelector","find","dashboard1","dashboard","ordered","useEffect","console","log","onDragEnd","destination","source","data","quoteMap","current","next","target","reordered","reorderQuoteMap","changeWidgetItem","newOrdered","setOrdered","direction","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,iNCE/BC,E,+DAAAA,K,wCAAAA,E,qDAAAA,M,KAKL,ICgFMC,EAAqC,CAPpB,CAC1BC,YAAa,eACbC,aAAc,yFACdC,kBAAmB,CAAC,SAAU,4EAAiB,oFAC/CC,WAlF0B,CAC1B,OAAU,CACN,CACIC,GAAI,SACJC,KAAM,UACNC,QAAS,CACLC,MAAO,2GACPC,OAAO,EACPC,KAAM,8DAGd,CACIL,GAAI,WACJC,KAAM,UACNC,QAAS,CACLC,MAAO,MACPC,MAAO,QACPH,KAAM,OACNI,KAAMC,KAAKC,MACXC,SAAU,QAGlB,CACIR,GAAI,aACJC,KAAM,UACNC,QAAS,CACLC,MAAO,+DACPC,MAAO,EACPH,KAAM,YAIlB,4EAAiB,CACb,CACID,GAAI,YACJC,KAAM,UACNC,QAAS,CACLC,MAAO,qBACPC,MAAO,SACPH,KAAM,WACNI,KAAMC,KAAKC,MACXC,SAAU,QAGlB,CACIR,GAAI,WACJC,KAAM,UACNC,QAAS,CACLC,MAAO,2GACPC,OAAO,EACPC,KAAM,8DAGd,CACIL,GAAI,eACJC,KAAM,UACNC,QAAS,CACLC,MAAO,+DACPC,MAAO,GACPH,KAAM,YAIlB,mFAAmB,CACf,CACID,GAAI,8BACJC,KAAM,UACNC,QAAS,CACLC,MAAO,qEACPC,MAAO,QACPH,KAAM,WACNI,KAAMC,KAAKC,MACXC,SAAU,eC7CXC,EAxBU,WAAgF,IAA/EC,EAA8E,uDAApDf,EAAkBgB,EAAkC,uCACpG,OAAQA,EAAOV,MACX,KAAKP,EAAQkB,mBACT,OAAOF,EAAMG,KAAI,SAACC,GACd,OAAIA,EAAKlB,cAAgBe,EAAOX,GACrB,2BAAIc,GAAX,IAAiBf,WAAYY,EAAOI,UAC1BD,KAItB,KAAKpB,EAAQsB,yBACT,OAAON,EAAMG,KAAI,SAACC,GACd,OAAIA,EAAKlB,cAAgBe,EAAOX,GACrB,2BAAIc,GAAX,IAAiBhB,kBAAmBa,EAAOI,UAEnCD,KAIpB,QACI,OAAOJ,ICtBbO,EAAcC,YAAgB,CAACT,qBAatBU,EAXDC,YACVH,EAGAI,OAAOC,8BAAgCD,OAAOC,gC,6BCPrCC,EAAU,SAACC,EAAaC,EAAoBC,GACrD,IAAMC,EAASC,MAAMC,KAAKL,GADuD,EAE/DG,EAAOG,OAAOL,EAAY,GAArCM,EAF0E,oBAKjF,OAFAJ,EAAOG,OAAOJ,EAAU,EAAGK,GAEpBJ,G,0CCkDIK,G,MA5CY,SAAC,GAA0C,IAAzC/B,EAAwC,EAAxCA,KAAME,EAAkC,EAAlCA,MAAOE,EAA2B,EAA3BA,KAAMD,EAAqB,EAArBA,MAAOI,EAAc,EAAdA,SAoBnD,OACI,yBAAKyB,UAAU,WACX,yBAAKA,UAAU,gBACX,yBACIC,IAtBC,WACb,OAAQjC,GACJ,IAAK,WACD,OAAOkC,IACX,IAAK,OACD,OAAOC,IACX,QACI,MAAO,IAeEC,GACLC,IAAKrC,IAET,4BAAKE,IAET,yBAAK8B,UAAU,mBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,QAlBZ,WACf,IAAMM,EAAa,IAAIjC,KAAKD,GACtBmC,EAAgBD,EAAKE,WACrBC,EAAkBH,EAAKI,aAC7B,MAAM,GAAN,OAAUH,EAAV,YAAmBE,GAcgBE,IACvB,yBAAKX,UAAU,YAAY7B,GAC3B,yBAAK6B,UAAU,YAAYzB,IAE/B,yBAAKyB,UAAU,mBACX,yBAAKC,IAAI,yDAAyDI,IAAK,YACvE,yBAAKJ,IAAI,yDAAyDI,IAAK,iBCd5EO,G,MA3BY,SAAC,GAA0B,IAAzB1C,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAAU,EAErByC,mBAAkB1C,GAFG,mBAE1C2C,EAF0C,KAElCC,EAFkC,KAI3CC,EAAQ,CACVC,gBAAiBH,EAAS,YAAc,OAG5C,OACI,yBAAKd,UAAU,WACX,yBAAKA,UAAU,uBACV9B,GAEL,yBAAK8B,UAAU,cAAcgB,MAAOA,GAChC,yBACIhB,UAAU,mBACVkB,QAAS,kBAAMH,GAAU,SAAAD,GAAM,OAAKA,OAEpC,6BACKA,EAAS,qBAAQ,6BAE1B,yBAAKd,UAAU,eAAe5B,OCD/B+C,G,MApBY,SAAC,GAAsC,IAArCjD,EAAoC,EAApCA,MAAckD,EAAsB,EAA7BjD,MAAmBH,EAAU,EAAVA,KAAU,EAEnC6C,mBAAiBO,GAFkB,mBAEtDjD,EAFsD,KAE/CkD,EAF+C,KAGvDC,EAA4B,WAATtD,EAAoB,SAAM,GAMnD,OACI,yBAAKgC,UAAU,WACX,4BAAK9B,GACL,yBAAK8B,UAAU,eACX,4BAAQkB,QAPP,kBAAYG,GAAS,SAAAlD,GAAK,OAAIA,EAAQ,OAOvC,KACA,6BAAMA,EAAN,IAAcmD,GACd,4BAAQJ,QAVP,kBAAYG,GAAS,SAAAlD,GAAK,OAAIA,EAAQ,OAUvC,SC2BDoD,EApCkB,SAAC,GAA2B,IAA1B1C,EAAyB,EAAzBA,KAAMd,EAAmB,EAAnBA,GAAIyD,EAAe,EAAfA,IAAKxD,EAAU,EAAVA,KAiB9C,OACI,kBAAC,IAAD,CACIyD,YAAa1D,EACb2D,MAAOF,IAEN,SAACG,EAAUC,GAAX,OACG,uCACI5B,UAAU,yBACV6B,IAAKF,EAASG,UACVH,EAASI,eACTJ,EAASK,iBAzBN,WACnB,OAAQhE,GACJ,IAAK,UACD,OAAO,kBAAC,EAAD,CAASE,MAAOW,EAAKX,MAAOE,KAAMS,EAAKT,KAAMJ,KAAMa,EAAKb,KAAMG,MAAOU,EAAKV,MAAOI,SAAUM,EAAKN,WAE3G,IAAK,UACD,OAAO,kBAAC,EAAD,CAASL,MAAOW,EAAKX,MAAOE,KAAMS,EAAKT,KAAMD,MAAOU,EAAKV,QAEpE,IAAK,UACD,OAAO,kBAAC,EAAD,CAASD,MAAOW,EAAKX,MAAOF,KAAMa,EAAKb,KAAMG,MAAOU,EAAKV,QAEpE,QAAS,OAAO,MAgBP8D,QCHNC,G,MA7BsB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MAC3C,OACI,kBAAC,IAAD,CACIC,YAAaF,IAGZ,SAACR,EAAUC,GAAX,OACG,yCACQD,EAASW,eADjB,CAEIT,IAAKF,EAASG,WAGVM,EAAMxD,KAAI,SAACC,EAAc2C,GAAf,OACN,kBAAC,EAAD,CACI3C,KAAMA,EAAKZ,QACXD,KAAMa,EAAKb,KACXD,GAAIc,EAAKd,GACTyD,IAAKA,EACLe,IAAK1D,EAAKd,QAIrB4D,EAASa,kBCMfC,G,MA3BoB,SAAC,GAA4B,IAA1Bf,EAAyB,EAAzBA,MAAOxD,EAAkB,EAAlBA,MAAOkE,EAAW,EAAXA,MAChD,OACI,kBAAC,IAAD,CAAWX,YAAavD,EAAOwD,MAAOA,IACjC,SAACC,EAAUC,GAAX,OACG,uCACI5B,UAAU,2BACV6B,IAAKF,EAASG,UACVH,EAASI,gBAEb,yBAAK/B,UAAU,yBAEX,sCAAIA,UAAU,wBACN2B,EAASK,gBADjB,CAEIU,aAAA,UAAexE,EAAf,iBAFJ,IAGGA,EAHH,MAKJ,kBAAC,EAAD,CACIiE,OAAQjE,EAERkE,MAAOA,UC6EhBO,G,MA/Fc,SAAC,GAAU,IAAT5E,EAAQ,EAARA,GAErB6E,EAAWC,cAEXC,EAA8BC,aAAY,SAACtE,GAAD,OAAgBA,EAAMD,oBAAkBwE,MAAK,SAACC,GAAD,OAA2BA,EAAWtF,cAAgBI,KAE7ImF,EAAuBJ,EAAiBhF,WAExCqF,EAAoBL,EAAiBjF,kBAE3CuF,qBAAU,eA2CV,OACI,oCACI,yBAAKpD,UAAU,mBACX,4BAAK8C,EAAiBlF,cACtB,4BACIsD,QAAS,kBAAKmC,QAAQC,IAAI,2FAD9B,mHAKJ,kBAAC,IAAD,CACIC,UAhDM,SAAC7D,GAIf,GAAKA,EAAO8D,YAAZ,CAEA,IAAMC,EAAS/D,EAAO+D,OAChBD,EAAc9D,EAAO8D,YAG3B,GACIC,EAAOpB,cAAgBmB,EAAYnB,aACnCoB,EAAO/B,QAAU8B,EAAY9B,MAIjC,GAAoB,WAAhBhC,EAAO1B,KAAX,CAUA,IAAM0F,EP7CiB,SAAC,GAIY,IAAD,EAHPC,EAGO,EAHPA,SACAF,EAEO,EAFPA,OACAD,EACO,EADPA,YAE1BI,EAAiB,YAAOD,EAASF,EAAOpB,cACxCwB,EAAc,YAAOF,EAASH,EAAYnB,cAC1CyB,EAAiBF,EAAQH,EAAO/B,OAEtC,GAAI+B,EAAOpB,cAAgBmB,EAAYnB,YAAa,CAChD,IAAM0B,EAAsBzE,EACxBsE,EACAH,EAAO/B,MACP8B,EAAY9B,OAMhB,MAAO,CACHiC,SALmB,2BAChBA,GADgB,kBAElBF,EAAOpB,YAAc0B,KAe9B,OARAH,EAAQ/D,OAAO4D,EAAO/B,MAAO,GAC7BmC,EAAKhE,OAAO2D,EAAY9B,MAAO,EAAGoC,GAO3B,CACHH,SAPmB,2BAChBA,GADgB,uBAElBF,EAAOpB,YAAcuB,GAFH,cAGlBJ,EAAYnB,YAAcwB,GAHR,KOmBNG,CAAgB,CACzBL,SAAUT,EACVO,SACAD,gBAIJZ,EXvDwB,SAAC7E,EAAYe,GACzC,MAAO,CACHd,KAAMP,EAAQkB,mBACdZ,KACAe,WWmDSmF,CAAiBlG,EAAI2F,EAAKC,eAjBnC,CACI,IAAMO,EAAuB5E,EACzB6D,EACAM,EAAO/B,MACP8B,EAAY9B,OAEhBkB,EXpCc,SAAC7E,EAAYe,GACnC,MAAO,CACHd,KAAMP,EAAQsB,yBACdhB,KACAe,WWgCaqF,CAAWpG,EAAImG,QA4BpB,kBAAC,IAAD,CACI7B,YAAY,QACZrE,KAAK,SACLoG,UAAU,eAGT,SAACzC,GAAD,OACG,uCACI3B,UAAU,YACV6B,IAAKF,EAASG,UACVH,EAASW,gBAGZa,EAAQvE,KAAI,SAAC2D,EAAab,GAAd,OACT,kBAAC,EAAD,CACIa,IAAKA,EACLb,MAAOA,EACPxD,MAAOqE,EACPH,MAAOc,EAAUX,QAGxBZ,EAASa,oBCxFvB6B,MARf,WACI,OACI,yBAAKrE,UAAU,OACX,kBAAC,EAAD,CAAWjC,GAAI,mBCD3BuG,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUtF,MAAOA,GACb,kBAAC,EAAD,QAGRuF,SAASC,eAAe,W","file":"static/js/main.0dd688b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/asteroid.bf499e68.svg\";","module.exports = __webpack_public_path__ + \"static/media/leaf.40871027.svg\";","import {WidgetMap} from \"../Components/types\";\r\n\r\nexport enum actions {\r\n    CHANGE_WIDGET_ITEM = 'CHANGE_WIDGET_ITEM',\r\n    CHANGE_WIDGET_LIST_ORDER = 'CHANGE_WIDGET_LIST_ORDER',\r\n}\r\n\r\nexport const changeWidgetItem = (id: string, payload: WidgetMap) => {\r\n    return {\r\n        type: actions.CHANGE_WIDGET_ITEM,\r\n        id,\r\n        payload,\r\n    }\r\n}\r\n\r\nexport const setOrdered = (id: string, payload: string[]) => {\r\n    return {\r\n        type: actions.CHANGE_WIDGET_LIST_ORDER,\r\n        id,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export type Actions = ChangeWidgetItem","import {WidgetMap, Dashboard, ArrayOfDashBoars} from \"../Components/types\";\r\n\r\nconst dataWidget: WidgetMap = {\r\n    'Dat4ik': [\r\n        {\r\n            id: '234234',\r\n            type: 'Widget2',\r\n            content: {\r\n                title: 'Освещение. Автоматы',\r\n                value: true,\r\n                time: '17 сентября 13:20'\r\n            }\r\n        },\r\n        {\r\n            id: '234ss234',\r\n            type: 'Widget1',\r\n            content: {\r\n                title: 'CO2',\r\n                value: '426.0',\r\n                type: 'leaf',\r\n                time: Date.now(),\r\n                typeData: 'ppm',\r\n            }\r\n        },\r\n        {\r\n            id: '234ccx2234',\r\n            type: 'Widget3',\r\n            content: {\r\n                title: 'Темература',\r\n                value: 1,\r\n                type: 'celsia'\r\n            }\r\n        },\r\n    ],\r\n    'Крутой датчик': [\r\n        {\r\n            id: '234s2s234',\r\n            type: 'Widget1',\r\n            content: {\r\n                title: 'Шум',\r\n                value: '123.99',\r\n                type: 'asteroid',\r\n                time: Date.now(),\r\n                typeData: 'ppm',\r\n            }\r\n        },\r\n        {\r\n            id: '23433234',\r\n            type: 'Widget2',\r\n            content: {\r\n                title: 'Освещение. Автоматы',\r\n                value: false,\r\n                time: '17 сентября 13:20'\r\n            }\r\n        },\r\n        {\r\n            id: '234cc44x2234',\r\n            type: 'Widget3',\r\n            content: {\r\n                title: 'Темература',\r\n                value: 99,\r\n                type: 'celsia'\r\n            }\r\n        },\r\n    ],\r\n    'Ещё один датчик': [\r\n        {\r\n            id: '213ыыыы',\r\n            type: 'Widget1',\r\n            content: {\r\n                title: 'Температура',\r\n                value: '22.00',\r\n                type: 'asteroid',\r\n                time: Date.now(),\r\n                typeData: '℃',\r\n            }\r\n        },\r\n    ]\r\n}\r\n\r\nconst dashBoard1: Dashboard = {\r\n    idDashBoard: 'hjg123jhg123',\r\n    nameOfOffice: 'Оффис на Фаберже',\r\n    orderedWidgetList: [\"Dat4ik\", \"Крутой датчик\", \"Ещё один датчик\"],\r\n    dataWidget: dataWidget,\r\n}\r\n\r\nexport const arrayOfDashBoars: ArrayOfDashBoars = [\r\n    dashBoard1,\r\n]\r\n","import {ArrayOfDashBoars, Dashboard} from \"../Components/types\";\r\nimport {actions} from \"./actions\";\r\nimport {arrayOfDashBoars} from './initialState';\r\n\r\n//добавить тип экшена\r\nconst dashboardReducer = (state: ArrayOfDashBoars = arrayOfDashBoars, action: any): ArrayOfDashBoars => {\r\n    switch (action.type) {\r\n        case actions.CHANGE_WIDGET_ITEM: {\r\n            return state.map((item: Dashboard) => {\r\n                if (item.idDashBoard === action.id) {\r\n                    return {...item, dataWidget: action.payload}\r\n                } else return item;\r\n            })\r\n        }\r\n\r\n        case actions.CHANGE_WIDGET_LIST_ORDER: {\r\n            return state.map((item)=>{\r\n                if (item.idDashBoard === action.id) {\r\n                    return {...item, orderedWidgetList: action.payload}\r\n                }\r\n                else return item;\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dashboardReducer;","import {createStore, combineReducers} from \"redux\";\r\nimport dashboardReducer from \"./reducers\";\r\n\r\nconst rootReducer = combineReducers({dashboardReducer})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    // @ts-ignore\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\n\r\n\r\n\r\nexport default store;","import {Widget, WidgetMap} from \"./types\";\r\n\r\nexport const reorder = (list: any[], startIndex: number, endIndex: number): any[] => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nexport const reorderQuoteMap = ({\r\n                                    quoteMap,\r\n                                    source,\r\n                                    destination,\r\n                                }: any) => {\r\n    const current: Widget[] = [...quoteMap[source.droppableId]];\r\n    const next: Widget[] = [...quoteMap[destination.droppableId]];\r\n    const target: Widget = current[source.index];\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n        const reordered: Widget[] = reorder(\r\n            current,\r\n            source.index,\r\n            destination.index,\r\n        );\r\n        const result: WidgetMap = {\r\n            ...quoteMap,\r\n            [source.droppableId]: reordered,\r\n        };\r\n        return {\r\n            quoteMap: result,\r\n        };\r\n    }\r\n\r\n    current.splice(source.index, 1);\r\n    next.splice(destination.index, 0, target);\r\n    const result: WidgetMap = {\r\n        ...quoteMap,\r\n        [source.droppableId]: current,\r\n        [destination.droppableId]: next,\r\n    };\r\n\r\n    return {\r\n        quoteMap: result,\r\n    };\r\n};\r\n","import React, {FC} from \"react\";\r\nimport asteroid from '../../../Img/asteroid.svg'\r\nimport leaf from '../../../Img/leaf.svg';\r\nimport './Widget1.css'\r\n\r\ninterface Props {\r\n    title: string,\r\n    time: number,\r\n    type: string,\r\n    value: string,\r\n    typeData: string,\r\n}\r\n\r\nconst Widget1: FC<Props> = ({type, title, time, value, typeData}) => {\r\n\r\n    const titleImg = (): string => {\r\n        switch (type) {\r\n            case 'asteroid':\r\n                return asteroid;\r\n            case 'leaf':\r\n                return leaf;\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    const timeString = (): string => {\r\n        const date: Date = new Date(time)\r\n        const hours: number = date.getHours()\r\n        const minutes: number = date.getMinutes()\r\n        return `${hours}:${minutes}`\r\n    }\r\n\r\n    return (\r\n        <div className='Widget1'>\r\n            <div className='widget1Title'>\r\n                <img\r\n                    src={titleImg()}\r\n                    alt={type}\r\n                />\r\n                <h6>{title}</h6>\r\n            </div>\r\n            <div className='widget1MainInfo'>\r\n                <div className='widget1Main'>\r\n                    <div className=\"time\">{timeString()}</div>\r\n                    <div className=\"mainData\">{value}</div>\r\n                    <div className=\"typeData\">{typeData}</div>\r\n                </div>\r\n                <div className='widget1Pictures'>\r\n                    <img src=\"http://dev.stdu.info/static/media/borders.e76b938e.svg\" alt={'metrics'}/>\r\n                    <img src=\"http://dev.stdu.info/static/media/borders.e76b938e.svg\" alt={'metrics'}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widget1;","import React, {FC, useState} from \"react\";\r\nimport './Widget2.css'\r\n\r\ninterface Props {\r\n    title: string,\r\n    time: string\r\n    value: boolean,\r\n}\r\n\r\nconst Widget2: FC<Props> = ({title, value, time}) => {\r\n\r\n    const [isTurn, setIsTurn] = useState<boolean>(value);\r\n\r\n    const style = {\r\n        backgroundColor: isTurn ? 'darkgreen' : 'red'\r\n    }\r\n\r\n    return (\r\n        <div className='Widget2'>\r\n            <div className=\"Widget2Widget2title\">\r\n                {title}\r\n            </div>\r\n            <div className='Widget2Main' style={style}>\r\n                <div\r\n                    className='Widget2Condition'\r\n                    onClick={() => setIsTurn(isTurn => !isTurn)}\r\n                >\r\n                    <div>\r\n                        {isTurn ? 'ВКЛ' : 'ВЫКЛ'}</div>\r\n                </div>\r\n                <div className='Widget2Date'>{time}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widget2;","import React, {FC, useState} from \"react\";\r\nimport './Widget3.css'\r\n\r\ninterface Props {\r\n    title: string,\r\n    type: string,\r\n    value: number\r\n}\r\n\r\nconst Widget3: FC<Props> = ({title, value: startValue, type}) => {\r\n\r\n    const [value, setValue] = useState<number>(startValue)\r\n    const thisType: string = type === 'celsia' ? '℃' : '';\r\n\r\n    const decr = (): void => setValue(value => value + 1)\r\n    const incr = (): void => setValue(value => value - 1)\r\n\r\n\r\n    return (\r\n        <div className='Widget3'>\r\n            <h6>{title}</h6>\r\n            <div className='Widget3Main'>\r\n                <button onClick={incr}>-</button>\r\n                <div>{value} {thisType}</div>\r\n                <button onClick={decr}>+</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Widget3;","import React, {FC} from \"react\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {Content, Widget, } from \"../types\";\r\nimport './DraggableItem.css'\r\nimport Widget1 from \"../Widgets/Widget1/Widget1\";\r\nimport Widget2 from \"../Widgets/Widget2/Widget2\";\r\nimport Widget3 from \"../Widgets/Widget3/Widget3\";\r\n\r\ninterface Props {\r\n    item: Content,\r\n    id: string,\r\n    idx: number,\r\n    type: string\r\n}\r\n\r\nconst DraggableItem: FC<Props> = ({item, id, idx, type}) => {\r\n\r\n    const getCurrentItem = () => {\r\n        switch (type) {\r\n            case 'Widget1':\r\n                return <Widget1 title={item.title} time={item.time} type={item.type} value={item.value} typeData={item.typeData}/>\r\n\r\n            case 'Widget2':\r\n                return <Widget2 title={item.title} time={item.time} value={item.value}/>\r\n\r\n            case 'Widget3':\r\n                return <Widget3 title={item.title} type={item.type} value={item.value}/>\r\n\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Draggable\r\n            draggableId={id}\r\n            index={idx}\r\n        >\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    className='containerDraggableItem'\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                >\r\n                    {getCurrentItem()}\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default DraggableItem;","import React, {FC} from \"react\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport {Widget} from \"../types\";\r\nimport DraggableItem from \"../DraggableItem/DraggableItem\";\r\nimport './DraggableItemList.css'\r\n\r\ninterface Props {\r\n    listId: string,\r\n    items: Widget[],\r\n}\r\n\r\n//QuoteList\r\nconst DraggableItemList: FC<Props> = ({listId, items}) => {\r\n    return (\r\n        <Droppable\r\n            droppableId={listId}\r\n            // type={listType}\r\n        >\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    {\r\n                        items.map((item: Widget, idx: number) => (\r\n                            <DraggableItem\r\n                                item={item.content}\r\n                                type={item.type}\r\n                                id={item.id}\r\n                                idx={idx}\r\n                                key={item.id}\r\n                            />\r\n                        ))\r\n                    }\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    )\r\n}\r\n\r\nexport default DraggableItemList;","import React, {FC} from \"react\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {Widget} from \"../types\";\r\nimport DraggableItemList from \"../DraggableItemList/DraggableItemList\";\r\nimport './DraggableColumn.css'\r\n\r\ninterface Props {\r\n    index: number,\r\n    title: string,\r\n    items: Widget[],\r\n}\r\n\r\n//Column\r\nconst DraggableColumn: FC<Props> = ({ index, title, items}) => {\r\n    return (\r\n        <Draggable draggableId={title} index={index}>\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    className='containerDraggableColumn'\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                >\r\n                    <div className='headerDraggableColumn'\r\n                    >\r\n                        <h4 className='titleDraggableColumn'\r\n                            {...provided.dragHandleProps}\r\n                            aria-label={`${title} quote list`}\r\n                        > {title} </h4>\r\n                    </div>\r\n                    <DraggableItemList\r\n                        listId={title}\r\n                        // listType=\"QUOTE\"\r\n                        items={items}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default DraggableColumn;","import React, {FC, useEffect} from \"react\";\r\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\r\nimport {WidgetMap, Dashboard} from \"../types\";\r\nimport {reorder, reorderQuoteMap} from \"../helpersDnD\";\r\nimport DraggableColumn from \"../DraggableColumn/DraggableColumn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changeWidgetItem, setOrdered} from \"../../Store/actions\";\r\nimport './DashBoards.css';\r\n\r\n\r\ninterface Props {\r\n    id: string\r\n}\r\n\r\nconst DashBoard: FC<Props> = ({id}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    // const dashboardAllInfo: Dashboard | any = useShallowEqualSelector(getDashboard).find((dashboard1: Dashboard) => dashboard1.idDashBoard === id);\r\n    const dashboardAllInfo: Dashboard = useSelector((state: any) => state.dashboardReducer).find((dashboard1: Dashboard) => dashboard1.idDashBoard === id);\r\n\r\n    const dashboard: WidgetMap = dashboardAllInfo.dataWidget;\r\n\r\n    const ordered: string[] = dashboardAllInfo.orderedWidgetList\r\n\r\n    useEffect(() => {\r\n        // console.log('dashboard In Component', dashboard);\r\n        // console.log('ordered', ordered);\r\n    })\r\n\r\n    const onDragEnd = (result: any) => {\r\n        // console.log('result', result)\r\n\r\n        // dropped nowhere\r\n        if (!result.destination) return;\r\n\r\n        const source = result.source;\r\n        const destination = result.destination;\r\n\r\n        // did not move anywhere - can bail early\r\n        if (\r\n            source.droppableId === destination.droppableId &&\r\n            source.index === destination.index\r\n        ) return;\r\n\r\n        // reordering column\r\n        if (result.type === 'COLUMN') {\r\n            const newOrdered: string[] = reorder(\r\n                ordered,\r\n                source.index,\r\n                destination.index,\r\n            );\r\n            dispatch(setOrdered(id, newOrdered));\r\n            return;\r\n        }\r\n\r\n        const data = reorderQuoteMap({\r\n            quoteMap: dashboard,\r\n            source,\r\n            destination,\r\n        });\r\n\r\n        //data.quoteMap - это переставленный виджетЛист\r\n        dispatch(changeWidgetItem(id, data.quoteMap));\r\n        //тут вызовем отправку изменений на сервер\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"headerDashboard\">\r\n                <h2>{dashboardAllInfo.nameOfOffice}</h2>\r\n                <button\r\n                    onClick={()=> console.log('Нажали добавить')}\r\n                >\r\n                    Добавить виджет-лист</button>\r\n            </div>\r\n            <DragDropContext\r\n                onDragEnd={onDragEnd}\r\n            >\r\n                <Droppable\r\n                    droppableId=\"board\"\r\n                    type=\"COLUMN\"\r\n                    direction=\"horizontal\"\r\n\r\n                >\r\n                    {(provided) => (\r\n                        <div\r\n                            className='container'\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {/*проходимся столько раз, сколько ключей в поступившем объекте:*/}\r\n                            {ordered.map((key: string, index: number) => (\r\n                                <DraggableColumn\r\n                                    key={key}\r\n                                    index={index}\r\n                                    title={key} /*<= заголовок из ключа объекта*/\r\n                                    items={dashboard[key]} /*<= здесь конкретный объект*/\r\n                                />\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashBoard;","import React from 'react';\r\nimport DashBoard from \"./Components/DashBoard/DashBoard\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <DashBoard id={'hjg123jhg123'}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Store/store\";\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}